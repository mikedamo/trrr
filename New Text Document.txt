# Step 1: Import Libraries
import pandas as pd
import numpy as np
from sklearn.neighbors import NearestNeighbors
from sklearn.preprocessing import StandardScaler

# Step 2: Load and Clean the Data
# Load the dataset
books = pd.read_csv('BX-Books.csv', sep=';', encoding='latin-1', usecols=[0, 1, 2], names=['ISBN', 'Title', 'Author'], skiprows=1)
ratings = pd.read_csv('BX-Ratings.csv', sep=';', encoding='latin-1', usecols=[0, 1, 2], names=['User-ID', 'ISBN', 'Rating'], skiprows=1)

# Merge datasets
data = pd.merge(ratings, books, on='ISBN')

# Filter users with less than 200 ratings
user_counts = data['User-ID'].value_counts()
valid_users = user_counts[user_counts >= 200].index
data = data[data['User-ID'].isin(valid_users)]

# Filter books with less than 100 ratings
book_counts = data['ISBN'].value_counts()
valid_books = book_counts[book_counts >= 100].index
data = data[data['ISBN'].isin(valid_books)]

# Create a pivot table for user-item matrix
user_item_matrix = data.pivot_table(index='User-ID', columns='Title', values='Rating').fillna(0)

# Step 3: Normalize the data
scaler = StandardScaler()
normalized_matrix = scaler.fit_transform(user_item_matrix)

# Step 4: Create and fit the Nearest Neighbors model
knn = NearestNeighbors(metric='cosine')
knn.fit(normalized_matrix)

# Step 5: Create the get_recommends function
def get_recommends(book_title, n_recommendations=5):
    # Check if the book exists in the dataset
    if book_title not in user_item_matrix.columns:
        return [book_title, []]
    
    # Find the index of the book
    book_index = user_item_matrix.columns.get_loc(book_title)
    
    # Find the nearest neighbors
    distances, indices = knn.kneighbors(normalized_matrix[:, book_index].reshape(1, -1), n_neighbors=n_recommendations + 1)
    
    # Create a list of recommended books and their distances
    recommendations = []
    for i in range(1, len(distances.flatten())):
        recommendations.append([user_item_matrix.columns[indices.flatten()[i]], distances.flatten()[i]])
    
    return [book_title, recommendations]

# Step 6: Test the function
result = get_recommends("The Queen of the Damned (Vampire Chronicles (Paperback))")
print(result)
